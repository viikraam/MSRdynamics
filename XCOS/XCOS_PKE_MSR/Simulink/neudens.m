% Function to calculate the n(t) and C_i(t) as a function of time.
% The parameters passed to the function are:
% 1. t=time step, 2. y=initial values for n(t) and C_i(t), 
% 3. react=function to retrieve reactivity values, 
% 4. source=function to retrieve source values, 
% 5. bet=column vector with beta values, 6. B=sum of all betas, 
% 7. lam=column vector of lambda values, 8. L=mean neutron generation time, 
% 9. t_L=transit time in loop, 10. t_C=transit time in core.
function ndot=neudens(t,y,Z,react,rho_0,source,bet,B,lam,L,t_L,t_C)
  ndot = zeros(7);
  ndot(1) = source(t) + ((((rho_0+react(t))-B)/L)*y(1)) + (lam(1)*y(2)) + ...
            (lam(2)*y(3)) + (lam(3)*y(4)) + (lam(4)*y(5)) + (lam(5)*y(6)) + ...
            (lam(6)*y(7));
  ndot(2) = ((bet(1)/L)*y(1)) - (lam(1)*y(2)) + (Z(2)*exp(-lam(1)*t_L)/t_C) - ...
             (y(2)/t_C);
  ndot(3) = ((bet(2)/L)*y(1)) - (lam(2)*y(3)) + (Z(3)*exp(-lam(2)*t_L)/t_C) - ...
             (y(3)/t_C);
  ndot(4) = ((bet(3)/L)*y(1)) - (lam(3)*y(4)) + (Z(4)*exp(-lam(3)*t_L)/t_C) - ...
             (y(4)/t_C);
  ndot(5) = ((bet(4)/L)*y(1)) - (lam(4)*y(5)) + (Z(5)*exp(-lam(4)*t_L)/t_C) - ...
             (y(5)/t_C);
  ndot(6) = ((bet(5)/L)*y(1)) - (lam(5)*y(6)) + (Z(6)*exp(-lam(5)*t_L)/t_C) - ...
             (y(6)/t_C);
  ndot(7) = ((bet(6)/L)*y(1)) - (lam(6)*y(7)) + (Z(7)*exp(-lam(6)*t_L)/t_C) - ...
             (y(7)/t_C);
end